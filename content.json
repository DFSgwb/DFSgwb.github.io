{"meta":{"title":"DFSgwb","subtitle":"My World","description":"我的技术分享","author":"GWB","url":"https://dfsgwb.github.io","root":"/"},"pages":[{"title":"tags","date":"2016-04-28T09:32:38.000Z","updated":"2023-04-12T08:56:58.891Z","comments":true,"path":"tags/index.html","permalink":"https://dfsgwb.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2023-04-12T09:00:21.000Z","updated":"2023-04-12T09:34:36.401Z","comments":true,"path":"categories/index.html","permalink":"https://dfsgwb.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2023-04-12T09:04:43.000Z","updated":"2023-04-12T12:36:38.502Z","comments":true,"path":"about/index.html","permalink":"https://dfsgwb.github.io/about/index.html","excerpt":"","text":"Hi there 👋😐 作者 Tell me, does the god Argvchs bleed?No, but you will. ✒️ 内容 ⚡ 算法 📖 教程 🔧 工具 💬 其他 💡 语言 🦄 C&#x2F;C++ 🐍 Python 🐤 JS &#x2F; Node.js 🐳 Bash 🐱 Vue 2 &#x2F; Vue 3 🐶 React 🐘 Electron ✨ 帐号 Website Account QQ Argvchs: 2973024690 Github Argvchs: DFSgwb CSDN Argvchs: 不会算法的数学小白 Leetcode Argvchs: 暴力解决一切"}],"posts":[{"title":"Disentangled High Quality Salient Object Detection","slug":"Disentangled High Quality Salient Object Detection","date":"2023-04-11T07:30:16.000Z","updated":"2023-04-11T12:39:23.861Z","comments":true,"path":"2023/04/11/Disentangled High Quality Salient Object Detection/","link":"","permalink":"https://dfsgwb.github.io/2023/04/11/Disentangled%20High%20Quality%20Salient%20Object%20Detection/","excerpt":"","text":"Disentangled High Quality Salient Object Detection摘要将高分辨率SOD任务分解为低分辨率显著性分类网络(LRSCN)和高分辨细化网络(HRRN),作为一项逐像素分类任务，LRSCN旨在以低分辨率来捕获足够的语义，以识别明确的显著，背景和不确定区域。HRRN是一项回归任务，旨在准确提炼不明确区域中的像素的显著性值。 Introduction一种好的高分辨率显著目标检测方法不仅要准确地检测出整个显著目标，还要预测显著目标的精确边界。基于低分辨率设计的SOD模型无法直接套用到高分辨率图像中，最主要的原因就是，低分辨的方法往往是将识别和定位两个过程使用一个过程实现，而对于高分辨率图像最为重要的是对于边界的精确分割。对于显著区域的定位我们可以通过扩大感受野来获取足够的语义，但是由于高分辨的特性，这将使得内存的使用大大的增加，此时往往采用下采样操作，但是下采样操作不可避免地会使得结构信息丢失。这种解决问题的思路也就是导致低分辨的SOD模型直接迁移至高分辨率图像中会出现边界模糊的原因。如下图所示 模型结果对比 从上图可以发现，显著像素点可以分为以下三类： (1)大多数显著对象内部的像素具有最高的显著值，我们称为确定的显著像素 (2) 背景区域中的大多数像素具有最低的显著值，我们称为确定的背景显著像素 (3) 模糊物体边界像素的显著值在0到1之间波动，称之为不明确像素 理想的 SOD 方法应有效识别图像中明确的显着区域和背景区域，并准确计算不确定区域中像素的显着性值，以保持清晰的目标边界。也就是一个回归任务加一个分类任务。将高分辨率显着对象检测分离为低分辨率显着性分类网络(LRSCN)和高分辨率细化网络(HRRN).LRSCN旨在以低分辨率捕获足够的语义并将像素分类为三个不同的集合以供以后处理.HRRN旨在准确提炼不确定区域中像素的显着性值,以在GPU内存有限的情况下以高分辨率保持清晰的对象边界.如上所述,HRRN 需要高分辨率图像中的结构细节。然而，广泛使用的低分辨率显着性数据集通常在注释质量方面存在一些问题,几乎不可能从这些有缺陷的数据集中直接获得足够的对象边界细节来训练高分辨率网络。在最近的工作中，Zeng 等人。提出通过使用具有准确注释的高分辨率图像来训练他们的 SOD 网络。然而，如此高质量的图像标注需要大量的人工成本。在我们的论文中,我们认为没有必要在网络训练中使用这种精确注释的高分辨率图像.通过在训练过程中引入不确定性，我们的 HRRN 可以仅使用标注不佳的低分辨率训练数据集很好地解决高分辨率细化任务。 模型方法HRRN High Resolution Network Framework LRSCN的目的是在低分辨率下获取足够的语义并将像素分为三个不同的集合，同时节省内存的使用，HRRN计算回归像素的显著性值，并在高分辨率下保持清晰的对象边界 LRSCN使用一个简单的U-Net编码器解码器架构，VGG-16作为主干网络，因此将从Conv1-2，Conv2-2，Conv3-3，Conv4-3，Conv5-3，Conv6-3获得六个特征，但是由于前两个特征的感受野太小，则不使用。在编码器和解码器之间增加一个多尺度特征提取和跨级特征融合模块(MECF)，以提高特征表示的可辨别性。解码器自上而下的方式融合MECF的输出特征和上一阶段的上采样特征，每个解码器的输出定义为$D_{i},i&#x3D;1,2,3…n$,最后SGA模块建立在D3之上用来生成准确的显著预测图T，为了回归清晰的目标边界值，HRRN的输入是在LRSCN提供的trimap引导下的高分辨率图像。HRRN具有基本的编码器-解码器架构，在不确定性损失的帮助下，网络可以对噪声数据更加鲁棒，并预测具有清晰边界的高分辨率显着图。 LRSCN###LRSCN架构图 开发了一种基于全局卷积网络GCN的多尺度特征提取模块ME，以扩大特征感受野并获得多尺度信息。为了实现第二个目标，我们利用跨级别特征融合模块CF来利用不同级别的特征优势。此外，在设计网络架构时，受的启发，我们使用拆分变换策略进一步放大 特征感受野，从而产生更具辨别力的特征表示。具体来说，我们将输入F按通道维度均匀地分成两部分${ F_{1}, F_2}$，然后将$F_1$送入多尺度特征提取路径，将$F_2$送入跨级特征融合路径。这两个路径的输出连接在一起作为最终输出。我们称这个桥接模块为MECF模块，如上图所示。 SGA模块：每个解码器融合来自MECF模块和前一解码器级的特征，然后使用$3×3$卷积层进行最终预测。为了保持trimap和显著图的一致性，确保trimap的不确定区域能够准确覆盖显著图的边界，我们在D3上设计了一个显著引导注意模块（SGA）。具体来说，我们首先使用$3×3$卷积和sigmoid函数来计算显著性映射。然后，将显著性图视为空间权重图，有助于细化特征并生成精确的trimap。最后，输出trimap T是3通道分类logits。整个SGA模块保证trimap和saliecny地图的对齐。 HRRN模块HRRN遵循解纠缠原则，在LRSCN提供的trimap的指导下，精确细化不确定区域中像素的显著性值，以保持高分辨率下清晰的目标边界。HRRN的架构如图2所示。HRRN有一个简单的类似U-NET的体系结构。为了在高分辨率下进行更好的预测，我们进行了一些非平凡的修改。首先，底层特征包含丰富的空间和细节信息，这些信息在恢复清晰的对象边界方面起着至关重要的作用，因此解码器在每个上采样块之前而不是在每个上采样块之后组合编码器特征。此外，我们使用一个两层的快捷块来对齐编码器特征通道，以进行特征融合。其次，为了让网络更加关注细节信息，我们通过一个快捷块将原始输入直接反馈到最后一个卷积层，以产生更好的结果。最后，从图像生成任务中学习，我们对每个卷积层使用谱归一化，以对网络的$Lipschitz$常数添加约束并稳定训练。 为了监督LRSCN，我们应该生成trimap的GT表示为$T^{gt}$，它可以表示确定的显着、确定的背景和不确定的区域。如上所述，不确定区域主要存在于对象的边界处。因此，我们使用随机像素数（5、7、9、11、13）在对象边界处擦除和扩展二进制真实图，以生成GT不确定区域。 剩余的前景和背景区域代表明确的显着和背景区域。$T^{gt}$ 定义为：$$\\Large T_{gt}(x,y) &#x3D;\\begin{cases}2 &amp; T_{gt}(x,y)\\in definite salient \\0 &amp; T_{gt}(x,y)\\in definite background \\1 &amp; T_{gt}(x,y)\\in uncertain region \\\\end{cases}$$其中$(x,y)$表示图像上的每个像素位置。如下图所示 结果可视化 对于trimap的监督我们使用交叉熵损失$$\\Large L_{trimap}&#x3D;\\dfrac{1}{N}\\sum_{i}-log(\\dfrac{e^{T_{i} } }{\\sum_{j} e^{T_{j} } })$$为保障trimap的准确率，我们在trimap监督的基础上增加了额外显著性监督$L_{saliency}$，总损失是$$\\Large L_{LRSCN}&#x3D;L_{saliency}+L_{trimap}$$不使用不确定性损失，因为LRSCN的主要目标是获取足够的语义，而不是精确的边界。 对于输入的高分辨率图像$I$，让$G^H$表示其背景真值，预测显著性图为$S^H$。我们利用$L_1$损失来比较预测显著性图和背景真值在明确的显著性和背景区域上的绝对差异：$$\\Large L_1 &#x3D; \\dfrac{1}{E}\\sum_{i\\in E}|S_{i}^H-G_{i}^H|$$其中$E$表示在$trimap$中被标记为明确显着或背景的像素数，$S_{H}^i$和$G_{H}^i$表示位置$i$处的预测值和$groundtruth$值。由于数据集本身在注释质量方面存在一些问题，因此引入一个不确定损失来解决数据集本身带来的缺陷。使用高斯似然的方式建模不确定性$$\\Large p(y|f(x))&#x3D;N(f(x),\\delta^2)$$其中$\\delta$表示测量的不确定性，$y$是输出，在最大似然推断中，我们将模型的对数似然最大化，表示为:$$\\Large logp(y|f(x))\\propto-\\dfrac{||y-f(x)||}{2\\delta^2}-\\dfrac{1}{2}log{\\delta^2}$$则不确定损失定义为：$$\\Large L_{uncertainty}&#x3D;\\dfrac{||y-f(x)||^2}{2\\delta^2}+\\dfrac{1}{2}log\\delta^2$$将其转化为像素的表达形式：$$\\Large L_{uncertainty}&#x3D;\\dfrac{1}{U}\\dfrac{||S_{i}^H-G_{i}^H||}{2\\delta_{i}^2}+\\dfrac{1}{2}log\\delta_{i}^2$$ HRRN损失可视化","categories":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/categories/SOD/"}],"tags":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/tags/SOD/"}]},{"title":"Looking for the Detail and Context Devils:High-Resolution Salient Object Detection","slug":"Looking for the Detail and Context Devils","date":"2023-04-11T07:30:16.000Z","updated":"2023-04-11T12:42:20.641Z","comments":true,"path":"2023/04/11/Looking for the Detail and Context Devils/","link":"","permalink":"https://dfsgwb.github.io/2023/04/11/Looking%20for%20the%20Detail%20and%20Context%20Devils/","excerpt":"","text":"Looking for the Detail and Context Devils:High-Resolution Salient Object Detection 缺乏显著对象的边界细节和语义上下文是低分辨率SOD数据集的一大弊端，本文设计了一个端到端的学习框架，称为DRFNet,使用一个共享特征提取器和两个有效的细化头构成。通过解耦细节和上下文信息，一个细化头采用全局感知和特征金字塔，在不增加太多计算负担的情况下，提升空间细节信息，从而缩小高级语义和低级细节之间的差距，另一个细化头采用混合扩张卷积块和分组上采样，这在提取上下文信息方面非常有效，基于双重细化，使得实现扩大感受野并从高分辨率图像中获取更多的判别特征。 高分辨率图像具有一个突出的特点包含更多可以覆盖范围和形状的结构对象和更多的细节信息。一方面高级上下文特征更适合检测大而混乱的对象，而小对象则受益于低级精细特征。不同层次特征的结合将为语义定位和细节增强提供更丰富的信息。 现有的基于FCN结构的方法一个缺点就是特征通常是以粗到精细的方式集成，它缺乏获取足够的局部和全局上下文信息或远程依赖关系的能力。导致不显眼的对象和混淆区域的准确性较差。大量的使用卷积操作使得对于算力和内存的要求变得极高，但如果将输入图像限制为相对较低的分辨率，又阻碍了细节感知和高分辨的实际需求。 现有的高分辨率图像像素级标记方法大致分为三大类， 1首先将高分辨率图像裁剪为低分辨图像，然后预测低分辨率结果并将其结果插值为原始图像大小。这种操作虽然简单但是图像空间细节的丢失是不可避免，导致出现对物体边界的错误预测 2设计轻型编码器-解码器网络,通过特征融合层次特征，之间提高空间分辨率并恢复一些缺少的细节，但是这种由于连续的下采样操作会带来空间信息的丢失且缺乏足够的对象的感受野 3 引入具有多个分支的不对称网络,每个分支以不同分辨率运行，即低分辨率图像中提取全局信息，高分辨率图像中提取精细细节，但是如何在不同分支上整合全局和局部信息还没一个很好的方法，由于高级语义和低级细节之间的差距，不好的融合方式可能使得它们在预测中出现奇怪的预测区域 常见的HRSOD网络架构 本文网络结构 共享特征提取器采用修改后的VGG-16和ResNet-18作为共享特征提取器 Detail Refinement HeadDRH包括三个关键块： 1卷积特征缩减块(CFRB):该块旨在缩小多尺度深度特征的维数，本质上就是一个$1\\times1$的卷积块，后面是批归一化和Relu激活函数，为减少高分辨率图像的计算和内存需求，卷积滤波器的数量设为为32 2深度特征上采样块(DFUB):采用C组的反卷积进行上采样，通过适当的上采样率，可以放大较深层的输出特征以匹配较浅层产生的特征，且进一步减少计算量 3全局感知特征交互块(GFIB)：由于接受域有限，无法获取足够的全局信息，为表达增强表现能力，首先对CFRB和DFUB的特征进行级联全局平均池化。然后将其转发到全连接层以生成全局权重向量,整个过程可以表示为$$\\Large \\alpha_G &#x3D; \\sigma(W_1GAP([F_C,F_D])+b)$$$$\\Large F_R&#x3D;g(W_2[F_C,F_D]+b)$$$$\\Large F_G &#x3D; \\alpha_G\\odot F_R$$ Context Refinement Head在直接堆叠或使用金字塔结构扩大感受野的策略中具有两个非常明显的缺点。1：计算量大，占用内存，不适合高分辨率图像。2：缺乏捕获足够多尺度局部上下文信息的能力，导致对于不显眼的对象的准确性较差本文提出的CRH使用混合膨胀卷积和分组上采样组成。具体的来说就是使用一个混合扩张卷积块和一个分组上采样组成","categories":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/categories/SOD/"}],"tags":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/tags/SOD/"}]},{"title":"Pyramidal Feature Shrinking for Salient Object Detection","slug":"PFSNet","date":"2023-04-11T07:30:16.000Z","updated":"2023-04-12T13:31:44.808Z","comments":true,"path":"2023/04/11/PFSNet/","link":"","permalink":"https://dfsgwb.github.io/2023/04/11/PFSNet/","excerpt":"","text":"Pyramidal Feature Shrinking for Salient Object Detection摘要提出了一种金字塔型特征收缩网络(PFSNet) ，其目的是将相邻的特征节点按照层层收缩的方式进行聚合，从而使聚合后的特征融合有效的细节和语义，丢弃干扰信息。特别地，提出了一种金字塔收缩译码器(PSD) ，以渐近的方式分层聚合相邻特征。此外，我们提出了一个相邻融合模块(AFM)来进行相邻特征之间的空间增强，以动态加权特征和自适应融合适当的信息。此外，利用基于主干提取特征的尺度感知富集模块(SEM)获取丰富的尺度信息，生成具有扩张卷积的不同初始特征。 在SOD任务中，高低级特征在功能之间有着很大的差距，SOD算法的关键在于如何充分利用语义和细节信息，在最后两个特征的合并中，具有丰富细节和噪声的低级特征和高级特征相融合，但是当两种特征完全不同时，差异较大的特征直接融合会产生噪声，导致性能的下降.本文提出了一种金字塔收缩解码器，将相邻特征定义为相似特征，将不相邻的特征定义为孤立特征，PSD仅收缩每层中类似的特征，经过几层收缩后，最时候当前输入的特征得以保留，然后配合AFM融合模块实现增强当前样本的特征并抑制不适合的特征，最后为了充分利用好多尺度信息，配合使用SEM。其对应的架构图如下所示： AFM模块将待合并的特征视为父特征，合并后的特征视为子特征，AFM要实现的两个功能： （1）子特征应该继承适当当前输入样本的特征，并丢弃不适合的特征 （2）子特征要和父特征保持相同的尺寸 首先通过逐元素乘法从父特征中提取共享特征，然后通过逐元素加法将共享特征加到父特征中从而增强它们，通过级联运算将两个处理后的特征合并，然后让它们依次通过全局平均化，$1\\times1$卷积和softmax函数来生成权重向量，最后对权重向量和特征进行相应的乘法，得到加权后的特征，在特征加权后再使用$3\\times3$卷积来压缩与副特征一致的子特征的通道，由于不同的特征具有不同的权重，因此在卷积计算受，具有较小权重的元素很少被子特征继承，通过这种方式，达到子特征继承重要的特征并丢弃更多的噪声的目的。 PSD模块本文首次提出将相邻特征扩展到层次融合。这样，我们就可以利用相邻特征融合的优势，实现多层次的特征融合，避免跳跃式融合操作。此外，从最后一个特征融合的位置来看，它可以直接集成基于 FPN 的框架中包含噪声的低层特征，而 PFSNet 则消除了大量的噪声。PSD的核心目的是为了实现多特征集成，同时尽可能避免跳跃式特征融合的操作，PSD是由AFM组成的结构。合并特征的过程在相邻节点对中进行，首先使用backone提出五层特征$f_1,f_2,f_3,f_4,f_5$,然后使用AFM模块将相邻的特征$f_i,f_{i+1}$得到$f^{‘}_i$依次类推得到最后的特征$f$","categories":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/categories/SOD/"}],"tags":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/tags/SOD/"}]},{"title":"Salient Object Detection via Dynamic Scale Routing","slug":"Salient Object Detection via Dynamic Scale Routing","date":"2023-04-11T07:30:16.000Z","updated":"2023-04-11T12:43:15.328Z","comments":true,"path":"2023/04/11/Salient Object Detection via Dynamic Scale Routing/","link":"","permalink":"https://dfsgwb.github.io/2023/04/11/Salient%20Object%20Detection%20via%20Dynamic%20Scale%20Routing/","excerpt":"","text":"Salient Object Detection via Dynamic Scale Routing 摘要现有的SOD模型的编码器可以通过提取多尺度特征，并通过各种微妙的解码器组合特征，但是这个特征通常是固定的，实际上，在不同场景中配合使用不同的内核大小是更可取的，因此本文提出了一种动态的金字塔卷积模型，动态选择最适合的内核大小，其次提出了一种自适应双向解码器以最好适应基于DPConv的编码器。最重要的的亮点是它能够在特征尺度及其动态集合之间进行路由，使推理过程具有尺度感知能力","categories":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/categories/SOD/"}],"tags":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/tags/SOD/"}]},{"title":"像素级光场显著性检测","slug":"像素级光场显著性检测","date":"2023-04-11T07:30:16.000Z","updated":"2023-04-11T12:38:51.239Z","comments":true,"path":"2023/04/11/像素级光场显著性检测/","link":"","permalink":"https://dfsgwb.github.io/2023/04/11/%E5%83%8F%E7%B4%A0%E7%BA%A7%E5%85%89%E5%9C%BA%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B/","excerpt":"","text":"摘要在一个统一的框架中识别干净的标签且有效的整合光场线索之间的关系。将学习描述为光场内特征融合流和场景间相关流的联合优化，以生成预测，首先引入一个像素遗忘引导融合模块，以相互增强光场特征，并利用迭代过程中的像素一致性来识别噪声像素，再引入跨场景噪声惩罚损失，以更好地反映训练数据的潜在结构，并使学习对噪声保持不变。 光场图像： 光场：是一个四维的参数化表示，是空间中同时包含位置和方向信息的四维光辐射场，简单地说，涵盖了光线在传播中的所有信息，在空间内任意角度，任意的位置都可以获得整个空间环境的真实信息，用光场获得的图像信息更加全面，品质更好。 光场成像的原理：传统相机成像是光线穿过镜头，而后传播到成像平面，光场成像则是在传感器平面添加了一个微透镜矩阵，在于将穿过主镜头的光线再次穿过每个微透镜，从而收获到光场的方向与位置信息，使成像结果在后期更加可调节，达到先拍照后聚焦的效果。 直接在像素级别噪声标签上训练显著性检测网络可能会引导网络过度适应损坏的标签。且当前现有的方式都缺乏全局视角来探索整个数据集之间的关系模式 光场显著性：","categories":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/categories/SOD/"}],"tags":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/tags/SOD/"}]},{"title":"基于深度质量的特征操作实现高效的RGBD显著目标检测","slug":"基于深度质量的特征操作实现高效的RGBD显著目标检测","date":"2023-04-11T07:30:16.000Z","updated":"2023-04-11T12:32:25.631Z","comments":true,"path":"2023/04/11/基于深度质量的特征操作实现高效的RGBD显著目标检测/","link":"","permalink":"https://dfsgwb.github.io/2023/04/11/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E7%89%B9%E5%BE%81%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%95%88%E7%9A%84RGBD%E6%98%BE%E8%91%97%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/","excerpt":"","text":"摘要基于RGBD显著目标检测模型在减少模型参数时，模型精度通常会下降，且受到深度质量的影响。本文设计了一种基于深度质量的特征操作(DQFM)：利用低级RGB和深度特征的对齐，以及深度流的整体关注来明确控制和增强跨模态融合。这是一个轻量化模型。 高质量的深度图通常具有一些与相应RGB图像对齐的边界 Efficient RGBD SOD Method将知识蒸馏就是用于深度蒸馏器，将从深度流获取到的深度知识转移到RGB流，从而实现无深度推理框架，后Chen设计了一个定制的深度主干，以提取互补特征 网络结构图 由编码器和解码器构成，其中RGB分支同时负责RGB特征提取和RGB与深度特征之间的交叉模式融合，另一方面解码器部分负责进行简单的两阶段融合以生成最终的显著性图，具体的说就是：编码器包括一个基于MobileNet-v2的RGB相关分支，一个深度相关分支，以及DQFM。在某个层次提取的深度特征通过DQFM后，再经过简单的元素加法融合到RGB分支中，然后发送到下一个层次。为了捕获多尺度语义信息，在RGB分支的末尾添加了PPM(金字塔池模块),在实际操作中，DQFM包含两个连续操作，深度质量启发加权和深度整体注意。 DQW结构 首先将低层特征$f_{r}^{1}$ 和 $f_{d}^{1}$ 转化为特征$ f_{rt^{‘} }$和$ f_{dt^{‘} }$,$$ \\large f_{rt^{‘} }&#x3D;BConv_{1\\times1}(f_{r}^{1}),f_{dt^{‘} }&#x3D;BConv_{1\\times1}(f_{d}^{1})$$ 其中$BConv$表示$1\\times1$卷积和$ReLU$激活函数，为了评估低级特征对齐，对这两个特征进行对齐编码$$ \\large V_{BA}&#x3D;\\dfrac{GAP(f_{rt^{‘} }\\otimes f_{dt^{‘} })}{GAP(f_{rt^{‘} } + f_{dt^{‘} })}$$ 其中$GAP(\\cdot)$表示全局平均池化操作，$\\otimes$表示按元素乘法。增强向量的计算方式：$$ \\large V_{BA}^{ms}&#x3D;[V_{BA},V_{BA}^{1},V_{BA}^{2}]$$其中[$\\cdot$]表示通道串联。然后使用两个完全连接的层使得$\\alpha\\in\\mathbb{R}^{5}$转化到$V_{BA}^{ms}$计算方式为：$$\\large\\alpha&#x3D;MLP(V_{BA}^{ms})$$$MLP(\\cdot)$表示末端为$Sigmoid$函数的感知器。 DHA结构 首先利用最高级特征$f_{d}^{5}$从深度流定位粗糙的突出区域，使用压缩和上采样方式使得$f_{d}^{5}$转化为$f_{dht}$计算方式为$$\\large f_{dht}&#x3D;F_{UP}^{8}(BConv_{1\\times1}(F_{DN}^2(f_{d}^5))$$ 其中$F_{UP}^{8}$表示8层双线性上采样，然后结合低层RGB和深度特征进行重新校准。为了更好地模拟低水平和高水平特征之间的长期依赖性，同时保持DHA的效率，我们采用最大池运算和扩大卷积来快速增加感受野。重新校准过程定义为：$$ \\large F_{rec}(f_{dht})&#x3D;F_{UP}^{2}(DConv_{3\\times3}(F_{DN}^{2}(f_{dht}+f_{ec})))$$ $F_{rec}(\\cdot)$表示重新校准过程。$DConv_{3\\times3}(\\cdot)$表示$3\\times3$扩张卷积，步长为1，扩张率为2.然后是$BatchNorm$和$ReLU$激活函数，$F_{UP}^{2}(\\cdot)&#x2F;F_{DN}^{2}(\\cdot)$表示双线性上采样\\下采样操作。为提高性能，再进行两次重新校准。$$\\large f_{dht}^{‘}&#x3D;F_{rec}(f_{dht}),f^{‘’}{dht}&#x3D;F{rec}(f^{‘}_{dht})$$ 最终实现整体注意力地图：$$\\large \\beta&#x3D;BConv_{3 \\times 3}(f_{ec}+f_{dht}^{‘’})$$ 最后获得五张深度整体注意图$\\large{ {\\beta_{1},\\beta_{2},\\beta_{3},\\beta_{4},\\beta_{5} }}$如下图所示： 通常情况下，深度学习不如RGB图像，为实现效率和准确性的平衡，本文选择定制深度主干(TDB)，具体来说就是基于$MobliceNetV2$中的反向剩余瓶颈块(IRB)并构建一个新的更小的主干，减少信道数量和堆叠块。结构如下： 解码器简化版的两级解码器，包括预融合和完全融合，预融合是通过信道压缩和层次分组来减少特征信道和层次，完全融合则是进一步聚合低层和高层特征，生成最终的显著图。 预融合阶段首先使用具有$BatchNorm$和$ReLU$激活的$3\\times3$深度可分离卷积，表示为$DSConv_{3\\times3}$,将压缩编码器特征$f_{c}^{i},(i&#x3D;1,2,…6)$到统一信道16，然后使用通道注意算子$F_{CA}$通过加权不同信道来增强特征。这个过程可以表示为：$$\\large cf_{c}^{i}&#x3D;F_{CA}(DSConv_{3\\times3}(f_{c}^{i}))$$其中$cf_{c}^{i}$表示压缩和增强功能。为了减少特征层次，作者将6个层次分为两个层次(低级层次和高级层次)$$ \\large cf_{c}^{low}&#x3D;\\sum_{i&#x3D;0}^{3}F_{UP}^{2^{i-1} }(cf_{c}^{i}),cf_{c}^{high}&#x3D;\\sum_{i&#x3D;4}^{6}cf_{c}^{i}$$ 聚合模块由于在预融合阶段，信道数量和层次已经减少，在全融合阶段，我们直接将高层和低层层次串联起来，然后将串联馈送到预测头，以获得最终的全分辨率预测图，表示为：$$ \\large S_c&#x3D;F_{p}^{c}([cf_{e}^{low},F_{UP}^{8}(cf_{c}^{high})])$$其中$S_c$表示最终的显著性图，$F_{p}^{c}(\\cdot)$表示一个预测头，由两个$3\\times3$深度方向可分离卷积（然后是$BatchNorm$层和$ReLU$激活）、一个$3\\times3Sigmoid$激活卷积以及一个$2\\times$双线性上采样组成，以恢复原始输入大小。 损失函数总损失$\\pounds$最终由深度分支损失$\\pounds_{c}$和深度监管损失$\\pounds_{d}$构成，$$\\large \\pounds &#x3D; \\pounds_{c}(S_{c},G)+ \\pounds_{d}(S_{d},G)$$我们使用的是标准的交叉熵损失","categories":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/categories/SOD/"}],"tags":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/tags/SOD/"}]},{"title":"Multi-Scale High-Resolution Vision Transformer for Semantic Segmentation","slug":"多尺度高分辨率Transformer","date":"2023-04-11T07:30:16.000Z","updated":"2023-04-12T03:36:12.863Z","comments":true,"path":"2023/04/11/多尺度高分辨率Transformer/","link":"","permalink":"https://dfsgwb.github.io/2023/04/11/%E5%A4%9A%E5%B0%BA%E5%BA%A6%E9%AB%98%E5%88%86%E8%BE%A8%E7%8E%87Transformer/","excerpt":"","text":"Multi-Scale High-Resolution Vision Transformer for Semantic Segmentation摘要VITs主要是为生成低分辨率表示的图像分类任务而设计的，这使得VITs的语义分割等密集预测任务具有挑战性，本文提出的HRVIT，通过高分辨率多分枝架构与ViT集成来增强ViT以学习语义丰富和空间精确的多尺度表示，通过各种分支块协同优化技术平衡HRVIT的模型行恩那个和效率 IntroductionVIT的单尺度和低分辨率表示对于需要高敏感性和细粒度图像细节的语义分割不友好。已有的多尺度VIT网络大多遵循类似于分类的网络拓扑，具有顺序或串联架构，基于复杂性考虑，都是逐渐对特征图进行下采样，以提取更高级别的低分辨表示，并将每个阶段的输出直接馈送到下游分割头，这样的顺序结构缺乏足够的跨尺度交互，因此没法产生高质量的高分辨率表示 HRVIT并行提取多分辨率特征并反复融合它们以生成具有丰富语义信息的高质量HR表示。简单的将HRNET中所有的卷积残差块替换为Transformer将遇到严重的可扩展性问题，如果没有良好的架构块协同优化，从多尺度继承的高表示能力可能会被硬件上令人望而却步的延迟和能源成本所击倒。因此本文使用以下方式进行优化 1）HRViT的多分支HR架构在跨分辨率融合的同时提取多尺度特征 2）使用增强局部注意力消除率冗余键和值以提高效率，并通过额外的并行卷积路径，额外的非线性单元和用于特征多样性增强的辅助快捷方式来增强模型的表达能力。 3）HRViT采用混合尺度卷积前馈网络加强多尺度特征提取 4）HRVIT的HR卷积结构和高效的补丁嵌入层在降低硬件成本的情况下保持率更多的低级细粒度特征 HRViT网络结构图 由图可知，HRViT第一部分由卷积干组成，同时提取低层特征，在卷积stem后，HRViT部署了四个渐进式Transformer阶段，其中第n阶段包含n个并行的多尺度Transformer分支，每个阶段可以有一个或多个模块。每个模块从一个轻量级密集融合层开始，以实现跨分辨率交互和一个用于局部特征提取的有效补丁嵌入块，然后是重复的增强局部自注意力块和混合尺度卷积前馈网络，与逐步降低空间维度以生成金字塔特征的顺序ViT主干不同，我们在整个网络中维护HR特征，以通过跨分辨率融合增强HR表示的质量。 多分支HRNet和self-attention运算所带来的高度复杂性会迅速导致内存占用，参数大小急剧上升，计算成本爆炸性增长，简单地在每个模块上分配相同局部注意力窗口大小的块将导致巨大的计算成本，根据对于复杂性分析， 最后决定使用狭窄的关注窗口代销，并在两条HR路径上使用最小数量的块。在中等分辨率的第三个分支，使用具有大窗口的深度分支，以提供大的感野和提取良好的高级特征。低分辨率的分支包含大多数参数们对于提供具有全局感受野的高级特征以及生成粗分割图非常有用，但是较低的空间尺度会导致图像细节丢失过多，因此旨在低分辨率的分支上部署几个大窗口块，已在参数预算下提高高级特征质量。十字形self-attention算子 cross-shaped self-attention 细粒度注意力 近似全局视图：通过两个平行正交的局部注意力，能够收集全局信息 可伸缩复杂性：窗口是一个维度固定的，避免了图像大小的二次复杂性 遵循CSWin中的十字形窗口划分方法，将输入$x\\in R^{H\\times W\\times C}$分成两部分${x_H,x_V \\in R^{H\\times W\\times C&#x2F;2}}$,$x_H$被分割成不相交的水平窗口，而另外一半$x_V$被分割成垂直窗口。将窗口设置为$s\\times W$或者$H\\times s$，在每个窗口中，将补丁分块为$K$个$d_k$维头部，然后应用局部self-attention。将零填充应用于输入$x_H$或$x_V$，以允许完整的第k个窗口，然后将注意力图中的填充区域屏蔽为0，以避免不连贯的语义关联原始的QKV线性层在计算和参数方面非常昂贵，因此共享键和值张量的线性投影，以节省计算和参数，此外，引入一个辅助路径，该路径具有并行深度方向卷积，以注入归纳偏置以促进训练，与CSWin中的局部位置编码不同，我们的并行路径是非线性的，并且在没有窗口划分的情况下应用于整个4—D特征映射$W^Vx$而没有窗口分区，这条路径可以被视为一个反向残差模块，它与self-attention中的线性投影层共享逐点卷积。这种共享路径可以有效注入归纳偏差，并以边际硬件开销的情况下增强局部特征聚合，作为对上述键值共享的性能补偿，引入一个额外的Hardswish函数来改善非线性，附加一个初始化为恒等投影的BatchNorm层以稳定分布以获得更好的可训练性，此外还添加了一个通道式投影作为多样性增强快捷方式，与传统增强的快捷方式不同，此快捷方式具有更高的非线性，不依赖于对硬件不友好的傅里叶变换。 混合尺度卷积前馈网络 受到MIT的MIxFFN和HR-NAS中多分支倒置残差块的启发，我们通过在两个线性层之间插入多个尺度深度卷积路径来设计混合尺度卷积，在MiXCFN中，在LayerForm之后，我们将信道按r的比例展开，然后将其分成两个分支，$3\\times 3$和$5 \\times 5$深度方向卷积用于增加HRViT的多尺度局部信息提取，出于效率的考虑，我们利用信道冗余，将MiXCFN扩展比r从4降到3或者2， 下采样部分self-attention的复杂度与图像大小成二次方，为解决大图像是的可伸缩性问题，在输入端对图像进行4倍的下采样，不在stem中使用注意操作，因为早期卷积比self-attention更能有效的提取低级特征，作为早期的卷积，遵循HRNet中的设计，并使用两个步长为2的CONV-BNReLU块作为更强的下采样stem，以提取C通道特征，并保留更多信息，这与之前使用步长为4的卷积ViTs不同. 在每个模块中的Transformer块之前，我们在分支上添加一个补丁嵌入块，用于匹配通道并通过增强的补丁之间通信提取补丁信息，但是n阶段的每个模块将会有n个嵌入块所带来的巨大算力代价，我们将补丁嵌入简化为逐点CONV，然后是深度CONV。 交叉分辨率融合，在每个模块的开头插入重复的交叉分辨率融合层。为了帮助LR特征保持更多的图像细节和精准的位置信息，我们将它们与下采样的HR特征合并，不使用基于渐进卷积的下采样路径来匹配张量形状，而是采用直接下采样路径来最小化算力开销，在第i个输入和第j个输出之间的下采样路径中，使用步长为$2j-i$的深度可分离卷积来缩小空间维度并匹配输出通道。 多尺度ViT分层架构来逐步下采样的金字塔特征。PVT将金字塔结构集成到ViT中以进行多尺度特征提取，Twins交织局部和全局注意力以学习多尺度表示，SegFormer提出了一种有效的分层编码器来提取粗略和精细的特征，CSWin通过多尺度十字形局部注意力进一步提高性能。 用于语义分割的多尺度表示学习：原有的分割框架是逐步对特征图进行下采样以计算LR表示，并通过上采样恢复HR特征，例如SegNet，UNet，Hourglass，HRNet通过跨分辨率融合在整个网络中维护HR表示，Lite-HRNet提出了条件通道加权块来跨分辨率交换信息，HR-NAS搜索反转残差块和辅助Transformer分支的通道","categories":[{"name":"默认分类","slug":"默认分类","permalink":"https://dfsgwb.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"High-Resolution Vision","slug":"High-Resolution-Vision","permalink":"https://dfsgwb.github.io/tags/High-Resolution-Vision/"},{"name":"Transformer","slug":"Transformer","permalink":"https://dfsgwb.github.io/tags/Transformer/"},{"name":"Segmentation","slug":"Segmentation","permalink":"https://dfsgwb.github.io/tags/Segmentation/"}]},{"title":"Zoom In and Out:A Mixed-scale Triplet Network for Camouflaged Object Detection","slug":"混合比例三层重网络实现伪装目标检测","date":"2023-04-11T07:30:16.000Z","updated":"2023-04-11T12:31:17.127Z","comments":true,"path":"2023/04/11/混合比例三层重网络实现伪装目标检测/","link":"","permalink":"https://dfsgwb.github.io/2023/04/11/%E6%B7%B7%E5%90%88%E6%AF%94%E4%BE%8B%E4%B8%89%E5%B1%82%E9%87%8D%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E4%BC%AA%E8%A3%85%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/","excerpt":"","text":"Zoom In and Out:A Mixed-scale Triplet Network for Camouflaged Object Detection摘要最近提出的伪装目标检测（COD）试图分割视觉上融入周围环境的目标，这在现实场景中是极其复杂和困难的。除了伪装对象与其背景之间具有很高的内在相似性外，这些对象通常在尺度上具有多样性，外观模糊，甚至被严重遮挡。为了解决这些问题，我们提出了一种混合比例的三重网络ZoomNet，它模仿人类在观察模糊图像时的行为，即放大和缩小。具体而言，我们的ZoomNet采用缩放策略，通过设计的尺度积分单元和分层混合尺度单元学习区分性混合尺度语义，充分挖掘候选对象和背景环境之间的细微线索。此外，考虑到来自不可区分纹理的不确定性和模糊性，我们构造了一个简单而有效的正则化约束，即不确定性感知损失，以促进模型在候选区域准确地生成具有更高置信度的预测。我们提出的高度任务友好的模型在四个公共数据集上始终优于现有的23种最先进的方法。此外，与最新的前沿模型相比，该模型在SOD任务上的优异性能也验证了该模型的有效性和通用性。 COD任务难点 如何在外观不明显和各种尺度的情况下准确定位伪装对象 如何抑制来自背景的明显干扰，更可靠地推断伪装对象 为了准确地找到场景中模糊或伪装的对象，人类可以尝试通过放大和缩小图像来参考和比较不同尺度下形状和外观的变化，这种行为模式为本文提供思路，可以通过模拟人类放大和缩小策略来识别伪装的物体。本文中提出一种混合规模的三重网络$ZoomNet$。为了精准定位目标，我们使用尺度空间理论来模拟放大和缩小策略，为此设计了两个关键模块 规模集成单元(SIU):筛选和聚合特定尺度的特征 分层混合规模单元(HMU):重组和增强混合尺度特征 此结构能够在混合尺度下挖掘出物体和背景之间准确而微妙的语义线索，并产生准确的预测，为了实现效率和有效性的平衡，模型采用共享权重策略，为增强模型在复杂场景下的泛化能力，设计了一个不确定性感知损失(UAL)来指导模型训练，模型结构图： 网络结构图 SIU：使用一个尺度作为主尺度，另外两个尺度作为辅助，利用共享的三元组特征编码器来提取不同尺度的特征并将它们馈送到尺度合并层。对于高尺度，使用最大池化加平均池化的混合结构进行下采样，这有助于在高分辨率特征中保持伪装对象的有效和多样性响应。对于低尺度使用双线性插值直接向上采样，然后将这些特征输入注意力生成器，并通过一系列卷积层计算出三通道特征图。然后再softmax激活层之后，可以获得对应于每个尺度的注意力映射计算权重为： $$\\Large A_i=softmax(\\Psi[U(f^{0.5}_i,f^{1.0}_i,D(f^{1.5}_i)],\\phi)$$ $$\\Large f_i=A^{0.5}_i\\cdot U(f^{0.5}_i)+A^{1.0}_i\\cdot f^{1.0}_i+A^{1.5}_i\\cdot D(f^{1.5}_i)$$","categories":[{"name":"COD","slug":"COD","permalink":"https://dfsgwb.github.io/categories/COD/"}],"tags":[{"name":"COD","slug":"COD","permalink":"https://dfsgwb.github.io/tags/COD/"}]},{"title":"Multi-Scale High-Resolution Vision Transformer for Semantic Segmentation","slug":"高分辨率显著性检测的金字塔嫁接模型","date":"2023-04-11T07:30:16.000Z","updated":"2023-04-11T12:31:25.904Z","comments":true,"path":"2023/04/11/高分辨率显著性检测的金字塔嫁接模型/","link":"","permalink":"https://dfsgwb.github.io/2023/04/11/%E9%AB%98%E5%88%86%E8%BE%A8%E7%8E%87%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%E7%9A%84%E9%87%91%E5%AD%97%E5%A1%94%E5%AB%81%E6%8E%A5%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"Pyramid Grafting Network for One-Stage High Resolution Saliency Detection摘要由于采样深度和感受野大小之间的矛盾，大多数根据低分辨输入设计的SOD模型在高分辨率图像中表现不佳，本文提出一种金字塔嫁接网络。使用transformer和CNN主干分别从不同分辨率的图像中提取特征，然后将特征从transformer分支嫁接到CNN分支，与此同时提出一种基于注意的分叉模型嫁接模块，使CNN分支能够在解码过程中，在不同信源特征的引导下，更全面地组合破碎的细节信息，此外还设计了一个注意引导丢失来明确监督交叉嫁接模块生成注意矩阵，以帮助网络更好地与来自不同模型的注意进行交互。 困境当前主流的SOD模型遇到高分辨率的图像，为了减少内存的开销往往会将图像先下采样然后对输出结果上采样已恢复原始分辨率，由于现在的SOD模型都是使用编码器-解码器的方式设计的，随着分辨率的大幅度提高，提取的特征大小会增加，但是网络的感受野是固定的，使得相对感受野变小，最终导致无法捕获对任务至关重要的全局语义。 目前对于高分辨率SOD方法有两种主流：HRSOD和DHQSOD，其中HRSOD将整个过程分为全局阶段，局部阶段和重组阶段，全局阶段为局部阶段和作物过程提供指导。DHSOD将SOD任务分解为分类任务和回归任务，这两个任务通过他们提出的trimap和不确定性损失连接起来，它们生成具有清晰边界的相对较好的显著性贴图。但是这两者都是使用多阶段架构，将SOD分为语义(低分辨率)和细节(高分辨率)两个阶段。由此引出两个问题： 阶段间语境语义迁移不一致，在前一个阶段获得的中间映射被输入到最后一个阶段，同时错误也被传递，由此后续细化阶段可能将继续放大错误 耗时，与单阶段相比，多阶段方法不仅难以并行且参数过多，模型运行运行速度较慢 高分辨率SDO发展Zeng等人Towards High-Resolution Salient Object Detection提出了一种高分辨率显著目标检测范式，使用GSN提取语义信息，使用APS引导的LRN优化局部细节，最后使用GLFN进行预测融合。他们还提供了第一个高分辨率显著目标检测数据集（HRSOD）。Tang等人Disentangled high quality salient object detection提出，显著目标检测应分为两项任务。他们首先设计LRSCN以在低分辨率下捕获足够的语义并生成trimap。通过引入不确定性损失，所设计的HRRN可以对第一阶段使用低分辨率数据集生成的trimap进行细化。然而，它们都使用多级体系结构，这导致推理速度较慢，难以满足某些实际应用场景。更严重的问题是网络之间的语义不一致。 使用常用的SOD数据集通常分辨率较低，用他们来训练高分辨率网络和评估高质量分割存在以下几点缺点: 图像分辨率低导致细节不足 注释边缘的质量较差 注释的更加精细级别不够令人满意 当前可用的高分辨率数据集是HRSOD，但是HRSOD数据集图像数量有限,严重影响模型的泛化能力。 Staggered Grafting Framework网络框架如图所示： 由两个编码器和一个解码器构成，使用Swim transformer和ResNet18作为编码器，transformer编码器能够在低分辨率情况下获得准确的全局语义信息，卷积编码器能够在高分辨率输入下获得丰富的细节信息，不同模型之间的提取的特征可能是互补的，可以获得更多的有效特征。 在编码的过程中，向两个编码器馈送不同分辨率的图像，并行获取全局语义信息和详细信息。解码分为三个过程，一个是Swim解码，一个是嫁接编码，最后是交错结构的ResNet解码，在第二个子阶段的解码特征是从跨模态移植模块产生的，其中全局语义信息从Swin分支移植到ResNet分支，跨模态移植模块还会处理一个名为CAM的矩阵进行监督 交叉模型迁移模块(CMGM)作用：移植由两个编码器提取的特征，对于transformer所提取的特征$f_{S_2}$能够远距离捕获信息，具有全局语义信息。使用ResNet所得到的$f_{R_5}$有更好的局部信息，也就是更丰富的细节信息。但是由于特征大小和感受野之间的差异，在$f_{R_5}$中有更多的噪声。 使用常见的融合方法：如逐元素相加和相乘的适用情况限制在显著预测和不同特征生成的预测至少有一部分是对的情况下，否则就是一种错误的适用方式，且这种操作都只关注于有限的局部信息，导致没法实现自我纠错。 作者提出使用CMGM重新计算ResNet特征和Transformer特征之间的逐点关系，将全局语义信息通过transformer分支转移到ResNet分支，从而弥补常见的错误，通过计算$E&#x3D;|G-P| \\in [0,1]$得到误差图 CMGM纠错效果图 CMGM网络结构 实验结果 可视化 CUDA_VISIBLE_DEVICES&#x3D;2,3 python3 -m torch.distributed.launch –nproc_per_node&#x3D;2 train_distributed.py –batchsize 4 –master_port 29501 –savepath “..&#x2F;model&#x2F;PGNet_DUTS_Test&#x2F;“ –datapath “&#x2F;storage&#x2F;GWB&#x2F;Data&#x2F;DUTS-TR”\\","categories":[{"name":"默认分类","slug":"默认分类","permalink":"https://dfsgwb.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"Transformer","slug":"Transformer","permalink":"https://dfsgwb.github.io/tags/Transformer/"},{"name":"Segmentation","slug":"Segmentation","permalink":"https://dfsgwb.github.io/tags/Segmentation/"}]},{"title":"Liunx常用命令","slug":"Liunx常用命令","date":"2022-10-07T07:52:20.000Z","updated":"2023-04-12T02:08:21.435Z","comments":true,"path":"2022/10/07/Liunx常用命令/","link":"","permalink":"https://dfsgwb.github.io/2022/10/07/Liunx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"pwd：显示当前工作目录的绝对路径 ls:（1）-a：显示当前目录的所有文件和目录包括隐藏的 （2）-l：一列表的方式显示信息 mkdir：用于创建目录，默认是单级目录，创建多级目录加一个 -p即可 rmdir:删除空目录，如果目录下面有内容时不可以删除，如果要强行删除有内容的文件夹使用 rm -rf删除 touch指令：创建空文件 cp：拷贝指令，拷贝文件到指定目录。基本语法：cp [选项] source dest 其中-r代表可以使用递归复制的方式拷贝整个文件夹 mv:移动文件与目录或者重命名 基本语法：（1）mv oldNameFile newNameFile （重命名） （2）mv /temp/movefile /targetFolder (移动文件) cat：查看文件指令， cat [选项] 要查看的文件 -n ：显示行号 less:用来分屏查看文件内容 echo：输出内容到控制台 用法：echo [选项] [输出内容] head：用于显示文件的开头部分内容，默认情况下是显示文件的前10行内容 tail：用于显示文件中尾部的内容，默认情况下tail指令显示文件的前10行内容。语法 （1）tail文件：查看文件尾部10行内容 （2）tail -n 5 文件 查看文件尾5行内容，数字可以随便 （3）tail -f 文件 实时追踪该文档的所有更新 $&gt;$ 指令和$&gt;&gt;$指令：输出重定向和追加 基本语法：（1）ls -l &gt; 文件 （将列表的内容写入文件中覆盖的方式） （2）ls -al &gt;&gt;文件 （将列表的内容追加写入到文件中） （3）cat 文件1 &gt; 文件2 （将文件1的内容覆盖到文件2） ln：软连接也称为符号链接，类似于windows中的快捷方式，主要存放了链接其他文件的路径 基本语法： ln -s [原文件或目录] [软链接名] （给原文件创建一个软链接） history：查看已经执行过的历史指令，也可以执行历史指令","categories":[{"name":"Liunx","slug":"Liunx","permalink":"https://dfsgwb.github.io/categories/Liunx/"}],"tags":[{"name":"Liunx","slug":"Liunx","permalink":"https://dfsgwb.github.io/tags/Liunx/"}]},{"title":"深度学习面试(一)","slug":"day_one","date":"2022-04-07T08:30:16.000Z","updated":"2023-04-12T00:58:06.864Z","comments":true,"path":"2022/04/07/day_one/","link":"","permalink":"https://dfsgwb.github.io/2022/04/07/day_one/","excerpt":"","text":"U-Net的业务场景： U-Net是一种深度学习神经网络结构，主要用于图像分割任务，特别是医学图像分割。相比于普通的CNN，U-Net具有以下特点： 1. U-Net是一种全卷积网络结构，可以对任意大小的图像进行分割，而不需要调整输入图像大小。 2. U-Net采用类似编码器-解码器的结构，通过对输入图像进行多次下采样和上采样，能够提取图像的多层次特征信息。 3. U-Net的解码器部分采用反卷积操作，能够对特征图进行上采样恢复，从而实现尺寸输出等同于原图的效果。 4. U-Net在标注数据有限的情况下，能够获取到更高质量的分割结果，有一定的鲁棒性。U-Net的使用场景，主要是医学图像分割任务，例如血管分割、肺部分割、细胞分割等领域。同时，U-Net也可以用于其他类型的图像分割任务。 U-Net相较于CNN的特点UNET是一种基于卷积神经网络(CNN)的语义分割模型，具有以下特点： 1. 全卷积结构：UNET采用全卷积结构，使得模型可以接受任意大小的输入图像，而输出相同大小的分割结果。 2. 对称结构：UNET具有对称的编码器-解码器结构，编码器对输入图像进行多层次的特征提取，解码器则将特征图恢复到与输入相同分辨率的输出分割图。 3. 上采样和跳跃连接：UNET使用上采样操作将编码器中的低分辨率特征图恢复到高分辨率，同时使用跳跃连接将编码器中的特征图与解码器中的特征图进行连接，增加了分割结果的精度。 4. 数据增强：UNET采用数据增强技术，通过旋转、缩放、翻转等操作扩充训练数据集，提高模型泛化性能。相比之下，CNN通常用于图像分类任务，它的特点包括： 1. 单一的输出：CNN输出一个标量或向量，表示图像的类别或相关属性。 2. 全连接结构：CNN包含全连接层来将图像特征映射到标签空间。 3. 低级特征提取：CNN通常使用较少的卷积层提取低级特征，因此对于复杂任务需要多个CNN串联才能实现。 4. 精度和速度折衷：CNN是为实时预测设计的，因此在精度和速度之间做出了折衷。 coding：写一个shuffle函数打乱一维数组：遍历一遍并每个元素与随机元素互换 import random def shuffle(arr): for i in range(len(arr)): rand_idx = random.randint(i,len(arr)-1) arr[i], arr[rand_idx] = arr[rand_idx], arr[i] return arr 对h×w的二维灰度图进行均值滤波，模板矩阵k×k：双重循环遍历二维数组，其中嵌套双重循环加和k×k个元素求均值 ```py import numpy as np &#39;&#39;&#39; 函数的输入参数为原图像img和模板大小k，返回值为均值滤波后的图像。 首先定义了模板中心距离边界的偏移量h_k和w_k。然后定义函数返回值result，并初始化为一个和原图像大小相同的全0矩阵。 接下来，通过双重循环遍历原图像的每个像素点(i, j)，并将模板覆盖在当前像素点(i, j)上。 对于模板中的每一个元素(m, n)，需要考虑其是否越界。这里用了max和min函数来确保不超出原图像的边界。 对于在原图像范围内的模板元素，将其像素值累加到sum变量中，并将计数器count加1。最后，用sum除以count来求这k×k个元素的均值，并将结果赋值给result矩阵中对应的像素值。 循环结束后，函数返回result作为均值滤波后的图像。 &#39;&#39;&#39; def mean_filter(img, k): h, w = img.shape h_k, w_k = k//2, k//2 result = np.zero((h, w), dtype=np.uint8) for i in range(h): for j in range(w): sum = 0 count = 0 for m in range(max(i-h_k, 0), min(i+h_k+1, h)): for n in range(max(j-w_k, 0), min(j+w_k+1, w)): sum += img[m, n] count += 1 result[i, j] = sum // count return result DenseUNet和ResNetDenseUNet和ResUNet是两种用于语义分割的卷积神经网络模型。DenseUNet模型基于DenseNet的思想，将迭代连接（skip connections）应用到了UNet模型中，提高了模型的学习能力和特征表达能力。该模型还针对边缘区域的分割效果差的问题，采用了VGG-16 的结构对边缘区域进行优化。 DenseUNet的设计思想主要是将经典的UNet网络与稠密连接（Dense Connection）的概念相结合，以提高图像分割的性能。稠密连接是指将前一层输出与当前层输入连接在一起，使得当前层可以接收到前一层的所有信息，从而增强了特征的复用性，加快了特征传递速度，提高了模型的训练效率。具体来说，DenseUNet将UNet的编码器和解码器部分中的每个卷积块都改成稠密连接块。在编码器部分，每个稠密连接块由一个3×3 卷积层和一个下采样层组成，并且每个输入都连接到当前层上。在解码器部分，每个稠密连接块由一个上采样层、一个3×3 卷积层、一个跳跃连接连接和一个此前的编码器部分的相应层输出连接组成。除此之外，DenseUNet还采用了多尺度的输入和输出模块来处理不同尺度的图像，以及引入了残差连接来消除梯度消失、加快收敛速度。这些设计思想使得DenseUNet在与其他图像分割方法进行比较时，具有更好的分割精度和更快的计算速度。 ResUNet模型基于ResNet和UNet的思想，使用残差连接和迭代连接实现了端到端地语义分割。该模型在高分辨率图像处理任务中表现优秀，同时还加入了空洞卷积（dilated convolution）和批归一化（batch normalization）等技术，进一步提高了模型的性能总的来说，DenseUNet和ResUNet都是比较优秀的语义分割模型，但具体应该选择哪一个模型还需要根据任务的具体需求进行选择。 boundary_lossimport torch def boundary_loss(pred, mask): &#39;&#39;&#39; pred: 模型预测结果, (batch_size, channels, height, width) mask: 分割图, (batch_size, channels, height, width) return: boundary_loss: 边界损失 &#39;&#39;&#39; # 计算梯度，得到边缘位置 pred_grad_x = torch.abs(pred[:, :, :, :-1] - pred[:, :, :, 1:]) pred_grad_y = torch.abs(pred[:, :, :-1, :] - pred[:, :, 1:, :]) mask_grad_x = torch.abs(mask[:, :, :, :-1] - mask[:, :, :, 1:]) mask_grad_y = torch.abs(mask[:, :, :-1, :] - mask[:, :, 1:, :]) # 计算boundary loss loss_x = pred_grad_x * mask_grad_x loss_y = pred_grad_y * mask_grad_y # 对loss进行求和和平均 boundary_loss = (torch.sum(loss_x) / torch.sum(mask_grad_x) + torch.sum(loss_y) / torch.sum(mask_grad_y)) / 2 return boundary_loss Boundary Loss是一种针对目标检测任务的损失函数，用于优化物体边缘的预测。我们可以使用PyTorch实现Boundary Loss。 首先，我们需要导入需要的PyTorch库。 import torch import torch.nn as nn 接下来，我们可以定义Boundary Loss的实现。 class BoundaryLoss(nn.Module): def __init__(self, alpha=1.0, beta=1.0, reduction=&#39;mean&#39;): super(BoundaryLoss, self).__init__() self.alpha = alpha self.beta = beta self.reduction = reduction def forward(self, pred, mask): &quot;&quot;&quot; :param pred: (B, C, H, W) - 模型的预测边缘图 :param mask: (B, C, H, W) - 真实边缘图 :return: boundary_loss - 边缘损失 &quot;&quot;&quot; # 计算边缘区域 dilated_mask = torch.clamp( nn.functional.max_pool2d(mask, (3, 3), stride=1, padding=1) - mask, 0, 1) boundary_mask = mask - dilated_mask # 将边缘区域应用于预测边缘图 boundary_pred = pred * boundary_mask # 计算损失 pos_loss = boundary_mask * torch.log(pred + 1e-8) neg_loss = (1 - boundary_mask) * torch.log(1 - boundary_pred + 1e-8) boundary_loss = -self.alpha * pos_loss - self.beta * neg_loss # 返回损失 if self.reduction == &#39;mean&#39;: return torch.mean(boundary_loss) elif self.reduction == &#39;sum&#39;: return torch.sum(boundary_loss) else: return boundary_loss 在实现中，首先我们计算真实边缘图的边缘区域，然后将边缘区域应用于模型的预测边缘图。接着，我们计算正样本和负样本的损失，最终求和得到边缘损失。最后，我们根据设定的reduction参数，选择使用平均值或总和作为最终的损失。（注意，在计算log时，加上一个很小的值1e-8，避免出现log(0)的情况） 接下来，我们将Boundary Loss应用于目标检测任务中。 # 定义模型 class MyDetectionModel(nn.Module): def __init__(self): super(MyDetectionModel, self).__init__() self.conv1 = nn.Conv2d(in_channels=3, out_channels=16, kernel_size=3, padding=1) self.bn1 = nn.BatchNorm2d(16) self.relu1 = nn.ReLU() self.conv2 = nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, padding=1) self.bn2 = nn.BatchNorm2d(32) self.relu2 = nn.ReLU() self.conv3 = nn.Conv2d(in_channels=32, out_channels=1, kernel_size=1) self.sigmoid = nn.Sigmoid() def forward(self, x): x = self.conv1(x) x = self.bn1(x) x = self.relu1(x) x = self.conv2(x) x = self.bn2(x) x = self.relu2(x) x = self.conv3(x) x = self.sigmoid(x) return x # 定义超参 lr = 0.001 epochs = 10 alpha, beta = 1.0, 1.0 reduction = &#39;mean&#39; # 定义数据加载器 train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=16, shuffle=True) # 定义模型和优化器 model = MyDetectionModel().to(device) optimizer = torch.optim.Adam(model.parameters(), lr=lr) # 定义损失函数 criterion = BoundaryLoss(alpha=alpha, beta=beta, reduction=reduction) # 训练模型 for epoch in range(epochs): for i, (images, targets) in enumerate(train_loader): images = images.to(device) targets = targets.to(device) optimizer.zero_grad() outputs = model(images) loss = criterion(outputs, targets) loss.backward() optimizer.step() 在训练环节中，我们加载数据，定义模型和优化器，并使用Boundary Loss作为损失函数进行优化。由于Boundary Loss针对物体边缘的优化，因此特别适合目标检测任务。 Boundary Loss是一种用于图像分割任务的损失函数，其核心思想是度量预测的边缘和真实边缘之间的距离，从而帮助网络更好地学习边缘信息。以下是在PyTorch中实现Boundary Loss的代码： import torch def boundary_loss(pred, target): &quot;&quot;&quot; Implementation of boundary loss in PyTorch. :param pred: predicted segmentation mask, dimension: (N, C, H, W) :param target: ground-truth segmentation mask, dimension: (N, C, H, W) :return: boundary loss value &quot;&quot;&quot; bce_loss = torch.nn.BCELoss(reduction=&quot;mean&quot;) # Compute the gradient of the target mask along both spatial dimensions target_x_grad = torch.abs(target[:, :, :, :-1] - target[:, :, :, 1:]) target_y_grad = torch.abs(target[:, :, :-1, :] - target[:, :, 1:, :]) target_edge = target_x_grad + target_y_grad # Compute the gradient of the predicted mask along both spatial dimensions pred_x_grad = torch.abs(pred[:, :, :, :-1] - pred[:, :, :, 1:]) pred_y_grad = torch.abs(pred[:, :, :-1, :] - pred[:, :, 1:, :]) pred_edge = pred_x_grad + pred_y_grad # Compute the boundary loss, which is the mean of the element-wise product of # the binary target edge (1 inside the boundary, 0 outside) and the distance # between the predicted edge and the target edge loss = bce_loss(target_edge, torch.clamp(pred_edge, 0, 1)) * target_edge.mean() return loss 在上述代码中，我们首先定义了一个标准的BCELoss作为Boundary Loss的基础。然后，我们以类似于Sobel算子的方式计算了目标和预测掩码的梯度，并将它们相加得到两个边缘掩码。接下来，我们计算了Boundary Loss，这是目标边缘掩码中每个像素距离它最近的预测边缘掩码像素的欧氏距离的平均值。我们在这里使用了torch.clamp(0,1)来进行预测边缘掩码的截断，以避免边缘像素梯度过大导致训练不稳定。 最后要注意的一点是，由于在计算Boundary Loss时我们使用了二进制掩码来筛选边界区域，因此我们需要将目标和预测掩码的数值范围压缩到[0,1]之间。如果您的数据集的标签具有多个类别，则需要对每个类别分别计算Boundary Loss，并对这些损失值进行加权平均。","categories":[{"name":"深度学习","slug":"深度学习","permalink":"https://dfsgwb.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"深度学习","slug":"深度学习","permalink":"https://dfsgwb.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"面试","slug":"面试","permalink":"https://dfsgwb.github.io/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"深度学习面试(二)","slug":"day_two","date":"2022-04-07T08:30:16.000Z","updated":"2023-04-12T00:58:33.674Z","comments":true,"path":"2022/04/07/day_two/","link":"","permalink":"https://dfsgwb.github.io/2022/04/07/day_two/","excerpt":"","text":"说说XGBoost和GBDT的不同: XGBoost和GBDT都是基于树的集成学习算法，但在实现细节和性能上存在一些不同： 对于目标函数的优化：XGBoost采用了类似于牛顿法的二阶泰勒展开方式进行目标函数的极值优化，加快了收敛速度；而GBDT采用的是一阶泰勒展开。 对于特征的选择：XGBoost采用增益和覆盖度的综合指标选择特征；GBDT采用的是信息熵或基尼指数。 对于剪枝的处理：XGBoost对于树的结构进行分裂之后，采用正则化的方式进行剪枝；GBDT采用的是贪心算法来选择最优分裂点。 对于模型的并行计算：XGBoost使用了多线程并行运算，在内存使用上更加高效；GBDT则只能串行计算。 对于缺失值的处理：XGBoost可以自动地学习处理缺失值，GBDT则需要另外进行预处理。综上所述，XGBoost在目标函数优化、特征选择、树结构剪枝以及模型的并行计算方面都具有更大的优势，因此在许多竞赛中取得了很好的成绩。但在数据处理方面相对要求更高。而GBDT则更为直观易懂，数据要求也相对较低。 XGBoost和GBDT都是决策树集成学习算法，它们的区别主要涵盖以下几个方面：1.算法原理：GBDT是一种基于残差学习的决策树集成算法，每一次学习目标是拟合当前模型残差，使得后续模型能够更好地拟合样本。而XGBoost是一种基于梯度提升的决策树算法，每一次学习目标是拟合当前模型梯度，使得后续模型能够更好地逼近损失函数。2.损失函数：在实际应用中，XGBoost支持更广泛的损失函数选择，除了GBDT中常用的平方误差和绝对误差，还支持logistic、softmax等分类问题的损失函数。而且XGBoost能够集成不同的损失函数。3.正则化：XGBoost加入了二阶导数信息来进行正则化，防止过拟合效果更好。同时，XGBoost还可以通过结构化的正则化方式减少过拟合现象。4.并行化处理：相比于GBDT，XGBoost引入了缓存访问和特征采样等并行处理方式，可以通过并行化处理更快地训练模型。5.可扩展性：XGBoost拓展性更强，支持分布式计算，可以在大数据环境下使用，而GBDT则只能在单机上运行。总的来说，XGBoost是一个更加高效、灵活、容易扩展的算法，能够更好地解决现实生活中的复杂问题，在机器学习和数据挖掘领域中得到了广泛应用。","categories":[{"name":"深度学习","slug":"深度学习","permalink":"https://dfsgwb.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"深度学习","slug":"深度学习","permalink":"https://dfsgwb.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"面试","slug":"面试","permalink":"https://dfsgwb.github.io/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"浅谈SQL注入，XSS攻击","slug":"信息安全","date":"2019-03-27T09:46:50.000Z","updated":"2023-04-12T02:12:44.700Z","comments":true,"path":"2019/03/27/信息安全/","link":"","permalink":"https://dfsgwb.github.io/2019/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/","excerpt":"","text":"作为计算机小白，一直都认为黑客很牛逼所以简单的了解一下这反面的知识——信息安全黑客是个英译词，译作Hacker。黑客攻击或者黑计算机的方式多种多样，主要分为两种：（1）非破坏性的攻击：一般是为了扰乱系统的运行，并不盗窃系统资料，仅仅只是使服务器暂时失去对外提供服务的能力，通常采用拒绝服务攻击或信息炸弹 （2）破坏性攻击：是以侵入他人电脑系统、盗窃系统保密信息、破坏目标系统的数据为目的 常见的攻击有DDOS，CSRF，Dos等，通常通过的途径有病毒式，洪水式，系统漏洞等。 下面简单的介绍几种 SQL注入 常见的注入式攻击，通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句添加链接描述 造成可以进行SQL注入的本质原因就是未将代码与数据进行严格的隔离，导致用户在读取数据的时候，错误的把数据作为代码的一部分执行。 下面举个简单的例子： var testCondition; testCondition = Request.from(&quot;testCondition&quot;) var sql =&quot;select * from TableA where id=&#39;&quot;+ testCondition +&quot;&#39;&quot;; 在上面的例子当中，如果用户输入的ID只是一个数字当然没有任何问题，但是如果用“;‘隔开后，在testCondition里面插入其他SQL语句，则会出现意想不到的结果。例如输入drop，delete等。例如你不小心输入”#--!#@”这样的字符然后保存使得数据库跟新就会使where后面的信息被注释掉了，执行语句就变成了 updata table set memo=&quot;&quot;# --! #(@&quot; where use_id=xxxxxxx; 使得全数据库的memo字段的数据都被跟新了，而不是你一个人的数据。下面有几个兄弟写的很详细，大家可以去看看（1）最详细的SQL注入教程–易利伟（2）web完全篇之SQL（3）SQL注入攻击（4）用sql注入攻破网站大家可以找个一个肉鸡网站去试试或者自己写一个肉鸡网站也是个不错的选择SQL注入的危害极大，在进行程序设计时我们可以从下面几个方面进行预防 （1）过滤用户输入参数中的特殊字符，从而降低被SQL注入的风险 （2）禁止使用字符串拼接的SQL语句，严格使用参数绑定传入的SQL参数 （3）合理使用数据库访问框架提供的防注入机制 xss攻击 XSS攻击全称跨站脚本攻击，是为不和层叠样式表(Cascading Style Sheets,CSS) 的缩写混淆，故将跨站脚本攻击缩写为XSS，XSS是一种在web应用中的计算机安全漏洞， 它允许恶意web用户将代码植入到提供给其它用户使用的页面中。即黑客通过技术手段向 正常用户请求的HTML页面中插入恶意脚本，从而可以执行任意脚本 xss的分类（1）反射型XSS 恶意代码并没有保存在目标网站，通过引诱用户点击一个链接到目标网站的恶意链接来 实施攻击的。 （2）存储型XSS 恶意代码被保存到目标网站的服务器中，这种攻击具有较强的稳定性和持久性，比较 常见场景是在博客，论坛等社交网站上，但OA系统，和CRM系统上也能看到它身影，比如某 CRM系统的客户投诉功能上存在XSS存储型漏洞，黑客提交了恶意攻击代码，当系统管理员 查看投诉信息时恶意代码执行，窃取了客户的资料，然而管理员毫不知情，这就是典型的 XSS存储型攻击。 (3) DOM型XSS 其实是一种特殊类型的反射型XSS，它是基于DOM文档对象模型的一种漏洞。 比如在2011年微博左右XSS蠕虫攻击事件，攻击者就利用微博发布功能中未对action-data漏洞做有效的过滤，在发布微博信息的时候戴上了包含攻击脚本的URL，用户访问该微博是便疯狂加载恶意脚本，该脚本会让用户以自己的账号自动转发同一条微博，通过这样的病毒式扩散，大量用户受到攻击。 下面举个简单的实例可能会导致反射型XSS的文件： &lt;div&gt; &lt;h3&gt;反射型XSS实例&lt;/h3&gt; &lt;br&gt;用户:&lt;%=request.getParamer(&quot;useName&quot;)%&gt; &lt;br&gt;系统错误信息：&lt;%=request.getParamer(&quot;errorMessage&quot;)%&gt; &lt;div&gt; 上面的代码从HTTP请求中取得了userName和errorMessage两个参数，并直接输出到HTML中用于展示，当构造这样一种URL时就出现了反射型XSS，用户便会执行脚本文件 http://xss.demo/self-xss.jsp?userName=666&lt;script&gt;alert(&quot;666&quot;)&lt;/script&gt; &amp;errorMessage=XSS实例&lt;script scr=http://hacker.demo/xss-script.js&gt; XSS攻击的预防主要是通过对用户的输入数据进行过滤和转义，如使用jsonp框架对用户输入的字符串作XSS过滤，使用Sping框架中的HtmlUtils对用户输入的字符串做html转义等下面是几篇写的较为详细的XSS攻击博客（1）web安全之XSS攻击（2）XSS跨站脚本攻击（3）XSS防御方法（4）浅谈XSS攻击原理时间匆匆而逝，下次我再来分享一点点关于第三种黑客攻击：CSRF的知识","categories":[{"name":"信息安全","slug":"信息安全","permalink":"https://dfsgwb.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"信息安全","slug":"信息安全","permalink":"https://dfsgwb.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"},{"name":"SQL","slug":"SQL","permalink":"https://dfsgwb.github.io/tags/SQL/"},{"name":"XSS","slug":"XSS","permalink":"https://dfsgwb.github.io/tags/XSS/"}]}],"categories":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/categories/SOD/"},{"name":"默认分类","slug":"默认分类","permalink":"https://dfsgwb.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"},{"name":"COD","slug":"COD","permalink":"https://dfsgwb.github.io/categories/COD/"},{"name":"Liunx","slug":"Liunx","permalink":"https://dfsgwb.github.io/categories/Liunx/"},{"name":"深度学习","slug":"深度学习","permalink":"https://dfsgwb.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"信息安全","slug":"信息安全","permalink":"https://dfsgwb.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"SOD","slug":"SOD","permalink":"https://dfsgwb.github.io/tags/SOD/"},{"name":"High-Resolution Vision","slug":"High-Resolution-Vision","permalink":"https://dfsgwb.github.io/tags/High-Resolution-Vision/"},{"name":"Transformer","slug":"Transformer","permalink":"https://dfsgwb.github.io/tags/Transformer/"},{"name":"Segmentation","slug":"Segmentation","permalink":"https://dfsgwb.github.io/tags/Segmentation/"},{"name":"COD","slug":"COD","permalink":"https://dfsgwb.github.io/tags/COD/"},{"name":"Liunx","slug":"Liunx","permalink":"https://dfsgwb.github.io/tags/Liunx/"},{"name":"深度学习","slug":"深度学习","permalink":"https://dfsgwb.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"面试","slug":"面试","permalink":"https://dfsgwb.github.io/tags/%E9%9D%A2%E8%AF%95/"},{"name":"信息安全","slug":"信息安全","permalink":"https://dfsgwb.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"},{"name":"SQL","slug":"SQL","permalink":"https://dfsgwb.github.io/tags/SQL/"},{"name":"XSS","slug":"XSS","permalink":"https://dfsgwb.github.io/tags/XSS/"}]}